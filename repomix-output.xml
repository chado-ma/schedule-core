This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
backup/postgres/data/base/1/PG_VERSION
backup/postgres/data/base/16384/PG_VERSION
backup/postgres/data/base/4/PG_VERSION
backup/postgres/data/base/5/PG_VERSION
backup/postgres/data/pg_hba.conf
backup/postgres/data/pg_ident.conf
backup/postgres/data/PG_VERSION
backup/postgres/data/postgresql.auto.conf
backup/postgres/data/postgresql.conf
backup/postgres/data/postmaster.opts
backup/postgres/data/postmaster.pid
data/myid
docker-compose.yml
pom.xml
README.md
src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/DateValidator.java
src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/GinasioValidator.java
src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/HorarioValidator.java
src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/RestricaoValidator.java
src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/ScheduleDuplicated.java
src/main/java/com/schedulecore/ufu/domains/chainresponsibility/ScheduleValidator.java
src/main/java/com/schedulecore/ufu/domains/inputs/CreateOrUpdateGinasioInput.java
src/main/java/com/schedulecore/ufu/domains/inputs/CreateScheduleInput.java
src/main/java/com/schedulecore/ufu/domains/inputs/DeleteScheduleInput.java
src/main/java/com/schedulecore/ufu/domains/inputs/GetSchedulesInput.java
src/main/java/com/schedulecore/ufu/domains/inputs/RestricaoInput.java
src/main/java/com/schedulecore/ufu/domains/models/enums/CampusEnum.java
src/main/java/com/schedulecore/ufu/domains/models/GinasioModel.java
src/main/java/com/schedulecore/ufu/domains/models/NewSchedule.java
src/main/java/com/schedulecore/ufu/domains/models/RestricaoModel.java
src/main/java/com/schedulecore/ufu/domains/models/ScheduleModel.java
src/main/java/com/schedulecore/ufu/domains/models/UserModel.java
src/main/java/com/schedulecore/ufu/domains/ports/DatabasePort.java
src/main/java/com/schedulecore/ufu/domains/ports/EmailSenderPort.java
src/main/java/com/schedulecore/ufu/domains/resourses/ginasio/CreateOrUpdateGinasio.java
src/main/java/com/schedulecore/ufu/domains/resourses/ginasio/DeleteGinasio.java
src/main/java/com/schedulecore/ufu/domains/resourses/restricao/CreateRestricao.java
src/main/java/com/schedulecore/ufu/domains/resourses/restricao/DeleteRestricao.java
src/main/java/com/schedulecore/ufu/domains/resourses/schedule/CreateSchedule.java
src/main/java/com/schedulecore/ufu/domains/resourses/schedule/DeleteSchedule.java
src/main/java/com/schedulecore/ufu/domains/resourses/schedule/GetSchedules.java
src/main/java/com/schedulecore/ufu/domains/usecases/ginasio/CreateOrUpdateGinasioImpl.java
src/main/java/com/schedulecore/ufu/domains/usecases/ginasio/DeleteGinasioImpl.java
src/main/java/com/schedulecore/ufu/domains/usecases/restricao/CreateRestricaoImpl.java
src/main/java/com/schedulecore/ufu/domains/usecases/restricao/DeleteRestricaoImpl.java
src/main/java/com/schedulecore/ufu/domains/usecases/schedule/CreateScheduleImpl.java
src/main/java/com/schedulecore/ufu/domains/usecases/schedule/DeleteScheduleImpl.java
src/main/java/com/schedulecore/ufu/domains/usecases/schedule/GetSchedulesImpl.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/request/CreateGinasioRequest.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/request/DeleteScheduleRequest.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/request/NewScheduleRequest.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/request/RestricaoRequest.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/request/ScheduleRequest.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/v1/AdmController.java
src/main/java/com/schedulecore/ufu/infrasctructure/api/v1/ScheduleController.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/DatabaseAdapter.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/GinasioEntity.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/ReservaEntity.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/RestricaoEntity.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/UserEntity.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/GinasioRepository.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/ReservaRepository.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/RestricaoRepository.java
src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/UserRepository.java
src/main/java/com/schedulecore/ufu/infrasctructure/emailsender/EmailSenderAdapter.java
src/main/java/com/schedulecore/ufu/infrasctructure/errorHandler/ErrorHandler.java
src/main/java/com/schedulecore/ufu/ScheduleCoreApplication.java
src/main/resources/application-docker.yml
src/main/resources/application-localdb.yml
src/main/resources/application.yml
src/test/firstcolletion.yaml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backup/postgres/data/base/1/PG_VERSION">
16
</file>

<file path="backup/postgres/data/base/16384/PG_VERSION">
16
</file>

<file path="backup/postgres/data/base/4/PG_VERSION">
16
</file>

<file path="backup/postgres/data/base/5/PG_VERSION">
16
</file>

<file path="backup/postgres/data/pg_hba.conf">
# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# Refer to the "Client Authentication" section in the PostgreSQL
# documentation for a complete description of this file.  A short
# synopsis follows.
#
# ----------------------
# Authentication Records
# ----------------------
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.  Records take one of these forms:
#
# local         DATABASE  USER  METHOD  [OPTIONS]
# host          DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl     DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostgssenc    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnogssenc  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
#
# (The uppercase items must be replaced by actual values.)
#
# The first field is the connection type:
# - "local" is a Unix-domain socket
# - "host" is a TCP/IP socket (encrypted or not)
# - "hostssl" is a TCP/IP socket that is SSL-encrypted
# - "hostnossl" is a TCP/IP socket that is not SSL-encrypted
# - "hostgssenc" is a TCP/IP socket that is GSSAPI-encrypted
# - "hostnogssenc" is a TCP/IP socket that is not GSSAPI-encrypted
#
# DATABASE can be "all", "sameuser", "samerole", "replication", a
# database name, a regular expression (if it starts with a slash (/))
# or a comma-separated list thereof.  The "all" keyword does not match
# "replication".  Access to replication must be enabled in a separate
# record (see example below).
#
# USER can be "all", a user name, a group name prefixed with "+", a
# regular expression (if it starts with a slash (/)) or a comma-separated
# list thereof.  In both the DATABASE and USER fields you can also write
# a file name prefixed with "@" to include names from a separate file.
#
# ADDRESS specifies the set of hosts the record matches.  It can be a
# host name, or it is made up of an IP address and a CIDR mask that is
# an integer (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that
# specifies the number of significant bits in the mask.  A host name
# that starts with a dot (.) matches a suffix of the actual host name.
# Alternatively, you can write an IP address and netmask in separate
# columns to specify the set of hosts.  Instead of a CIDR-address, you
# can write "samehost" to match any of the server's own IP addresses,
# or "samenet" to match any address in any subnet that the server is
# directly connected to.
#
# METHOD can be "trust", "reject", "md5", "password", "scram-sha-256",
# "gss", "sspi", "ident", "peer", "pam", "ldap", "radius" or "cert".
# Note that "password" sends passwords in clear text; "md5" or
# "scram-sha-256" are preferred since they send encrypted passwords.
#
# OPTIONS are a set of options for the authentication in the format
# NAME=VALUE.  The available options depend on the different
# authentication methods -- refer to the "Client Authentication"
# section in the documentation for a list of which options are
# available for which authentication methods.
#
# Database and user names containing spaces, commas, quotes and other
# special characters must be quoted.  Quoting one of the keywords
# "all", "sameuser", "samerole" or "replication" makes the name lose
# its special character, and just match a database or username with
# that name.
#
# ---------------
# Include Records
# ---------------
#
# This file allows the inclusion of external files or directories holding
# more records, using the following keywords:
#
# include           FILE
# include_if_exists FILE
# include_dir       DIRECTORY
#
# FILE is the file name to include, and DIR is the directory name containing
# the file(s) to include.  Any file in a directory will be loaded if suffixed
# with ".conf".  The files of a directory are ordered by name.
# include_if_exists ignores missing files.  FILE and DIRECTORY can be
# specified as a relative or an absolute path, and can be double-quoted if
# they contain spaces.
#
# -------------
# Miscellaneous
# -------------
#
# This file is read on server startup and when the server receives a
# SIGHUP signal.  If you edit the file on a running system, you have to
# SIGHUP the server for the changes to take effect, run "pg_ctl reload",
# or execute "SELECT pg_reload_conf()".
#
# ----------------------------------
# Put your actual configuration here
# ----------------------------------
#
# If you want to allow non-local connections, you need to add more
# "host" records.  In that case you will also need to make PostgreSQL
# listen on a non-local interface via the listen_addresses
# configuration parameter, or via the -i or -h command line switches.

# CAUTION: Configuring the system for local "trust" authentication
# allows any local user to connect as any PostgreSQL user, including
# the database superuser.  If you do not trust all your local users,
# use another authentication method.


# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     all             ::1/128                 trust

host all all all scram-sha-256
</file>

<file path="backup/postgres/data/pg_ident.conf">
# PostgreSQL User Name Maps
# =========================
#
# ---------------
# Mapping Records
# ---------------
#
# Refer to the PostgreSQL documentation, chapter "Client
# Authentication" for a complete description.  A short synopsis
# follows.
#
# This file controls PostgreSQL user name mapping.  It maps external
# user names to their corresponding PostgreSQL user names.  Records
# are of the form:
#
# MAPNAME  SYSTEM-USERNAME  PG-USERNAME
#
# (The uppercase quantities must be replaced by actual values.)
#
# MAPNAME is the (otherwise freely chosen) map name that was used in
# pg_hba.conf.  SYSTEM-USERNAME is the detected user name of the
# client.  PG-USERNAME is the requested PostgreSQL user name.  The
# existence of a record specifies that SYSTEM-USERNAME may connect as
# PG-USERNAME.
#
# If SYSTEM-USERNAME starts with a slash (/), it will be treated as a
# regular expression.  Optionally this can contain a capture (a
# parenthesized subexpression).  The substring matching the capture
# will be substituted for \1 (backslash-one) if present in
# PG-USERNAME.
#
# PG-USERNAME can be "all", a user name, a group name prefixed with "+", or
# a regular expression (if it starts with a slash (/)).  If it is a regular
# expression, the substring matching with \1 has no effect.
#
# Multiple maps may be specified in this file and used by pg_hba.conf.
#
# No map names are defined in the default configuration.  If all
# system user names and PostgreSQL user names are the same, you don't
# need anything in this file.
#
# ---------------
# Include Records
# ---------------
#
# This file allows the inclusion of external files or directories holding
# more records, using the following keywords:
#
# include           FILE
# include_if_exists FILE
# include_dir       DIRECTORY
#
# FILE is the file name to include, and DIR is the directory name containing
# the file(s) to include.  Any file in a directory will be loaded if suffixed
# with ".conf".  The files of a directory are ordered by name.
# include_if_exists ignores missing files.  FILE and DIRECTORY can be
# specified as a relative or an absolute path, and can be double-quoted if
# they contain spaces.
#
# -------------------------------
# Miscellaneous
# -------------------------------
#
# This file is read on server startup and when the postmaster receives
# a SIGHUP signal.  If you edit the file on a running system, you have
# to SIGHUP the postmaster for the changes to take effect.  You can
# use "pg_ctl reload" to do that.

# Put your actual configuration here
# ----------------------------------

# MAPNAME       SYSTEM-USERNAME         PG-USERNAME
</file>

<file path="backup/postgres/data/PG_VERSION">
16
</file>

<file path="backup/postgres/data/postgresql.auto.conf">
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.
</file>

<file path="backup/postgres/data/postgresql.conf">
# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
# "#" anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, run "pg_ctl reload", or execute
# "SELECT pg_reload_conf()".  Some parameters, which are marked below,
# require a server shutdown and restart to take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# "postgres -c log_connections=on".  Some parameters can be changed at run time
# with the "SET" SQL command.
#
# Memory units:  B  = bytes            Time units:  us  = microseconds
#                kB = kilobytes                     ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days


#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

# The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

#data_directory = 'ConfigDir'		# use data in another directory
					# (change requires restart)
#hba_file = 'ConfigDir/pg_hba.conf'	# host-based authentication file
					# (change requires restart)
#ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
					# (change requires restart)

# If external_pid_file is not explicitly set, no extra PID file is written.
#external_pid_file = ''			# write an extra PID file
					# (change requires restart)


#------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
#------------------------------------------------------------------------------

# - Connection Settings -

listen_addresses = '*'
					# comma-separated list of addresses;
					# defaults to 'localhost'; use '*' for all
					# (change requires restart)
#port = 5432				# (change requires restart)
max_connections = 100			# (change requires restart)
#reserved_connections = 0		# (change requires restart)
#superuser_reserved_connections = 3	# (change requires restart)
#unix_socket_directories = '/var/run/postgresql' # comma-separated list of directories
					# (change requires restart)
#unix_socket_group = ''			# (change requires restart)
#unix_socket_permissions = 0777		# begin with 0 to use octal notation
					# (change requires restart)
#bonjour = off				# advertise server via Bonjour
					# (change requires restart)
#bonjour_name = ''			# defaults to the computer name
					# (change requires restart)

# - TCP settings -
# see "man tcp" for details

#tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
					# 0 selects the system default
#tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
					# 0 selects the system default
#tcp_keepalives_count = 0		# TCP_KEEPCNT;
					# 0 selects the system default
#tcp_user_timeout = 0			# TCP_USER_TIMEOUT, in milliseconds;
					# 0 selects the system default

#client_connection_check_interval = 0	# time between checks for client
					# disconnection while running queries;
					# 0 for never

# - Authentication -

#authentication_timeout = 1min		# 1s-600s
#password_encryption = scram-sha-256	# scram-sha-256 or md5
#scram_iterations = 4096
#db_user_namespace = off

# GSSAPI using Kerberos
#krb_server_keyfile = 'FILE:${sysconfdir}/krb5.keytab'
#krb_caseins_users = off
#gss_accept_delegation = off

# - SSL -

#ssl = off
#ssl_ca_file = ''
#ssl_cert_file = 'server.crt'
#ssl_crl_file = ''
#ssl_crl_dir = ''
#ssl_key_file = 'server.key'
#ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers
#ssl_prefer_server_ciphers = on
#ssl_ecdh_curve = 'prime256v1'
#ssl_min_protocol_version = 'TLSv1.2'
#ssl_max_protocol_version = ''
#ssl_dh_params_file = ''
#ssl_passphrase_command = ''
#ssl_passphrase_command_supports_reload = off


#------------------------------------------------------------------------------
# RESOURCE USAGE (except WAL)
#------------------------------------------------------------------------------

# - Memory -

shared_buffers = 128MB			# min 128kB
					# (change requires restart)
#huge_pages = try			# on, off, or try
					# (change requires restart)
#huge_page_size = 0			# zero for system default
					# (change requires restart)
#temp_buffers = 8MB			# min 800kB
#max_prepared_transactions = 0		# zero disables the feature
					# (change requires restart)
# Caution: it is not advisable to set max_prepared_transactions nonzero unless
# you actively intend to use prepared transactions.
#work_mem = 4MB				# min 64kB
#hash_mem_multiplier = 2.0		# 1-1000.0 multiplier on hash table work_mem
#maintenance_work_mem = 64MB		# min 1MB
#autovacuum_work_mem = -1		# min 1MB, or -1 to use maintenance_work_mem
#logical_decoding_work_mem = 64MB	# min 64kB
#max_stack_depth = 2MB			# min 100kB
#shared_memory_type = mmap		# the default is the first option
					# supported by the operating system:
					#   mmap
					#   sysv
					#   windows
					# (change requires restart)
dynamic_shared_memory_type = posix	# the default is usually the first option
					# supported by the operating system:
					#   posix
					#   sysv
					#   windows
					#   mmap
					# (change requires restart)
#min_dynamic_shared_memory = 0MB	# (change requires restart)
#vacuum_buffer_usage_limit = 256kB	# size of vacuum and analyze buffer access strategy ring;
					# 0 to disable vacuum buffer access strategy;
					# range 128kB to 16GB

# - Disk -

#temp_file_limit = -1			# limits per-process temp file space
					# in kilobytes, or -1 for no limit

# - Kernel Resources -

#max_files_per_process = 1000		# min 64
					# (change requires restart)

# - Cost-Based Vacuum Delay -

#vacuum_cost_delay = 0			# 0-100 milliseconds (0 disables)
#vacuum_cost_page_hit = 1		# 0-10000 credits
#vacuum_cost_page_miss = 2		# 0-10000 credits
#vacuum_cost_page_dirty = 20		# 0-10000 credits
#vacuum_cost_limit = 200		# 1-10000 credits

# - Background Writer -

#bgwriter_delay = 200ms			# 10-10000ms between rounds
#bgwriter_lru_maxpages = 100		# max buffers written/round, 0 disables
#bgwriter_lru_multiplier = 2.0		# 0-10.0 multiplier on buffers scanned/round
#bgwriter_flush_after = 512kB		# measured in pages, 0 disables

# - Asynchronous Behavior -

#backend_flush_after = 0		# measured in pages, 0 disables
#effective_io_concurrency = 1		# 1-1000; 0 disables prefetching
#maintenance_io_concurrency = 10	# 1-1000; 0 disables prefetching
#max_worker_processes = 8		# (change requires restart)
#max_parallel_workers_per_gather = 2	# taken from max_parallel_workers
#max_parallel_maintenance_workers = 2	# taken from max_parallel_workers
#max_parallel_workers = 8		# maximum number of max_worker_processes that
					# can be used in parallel operations
#parallel_leader_participation = on
#old_snapshot_threshold = -1		# 1min-60d; -1 disables; 0 is immediate
					# (change requires restart)


#------------------------------------------------------------------------------
# WRITE-AHEAD LOG
#------------------------------------------------------------------------------

# - Settings -

#wal_level = replica			# minimal, replica, or logical
					# (change requires restart)
#fsync = on				# flush data to disk for crash safety
					# (turning this off can cause
					# unrecoverable data corruption)
#synchronous_commit = on		# synchronization level;
					# off, local, remote_write, remote_apply, or on
#wal_sync_method = fsync		# the default is the first option
					# supported by the operating system:
					#   open_datasync
					#   fdatasync (default on Linux and FreeBSD)
					#   fsync
					#   fsync_writethrough
					#   open_sync
#full_page_writes = on			# recover from partial page writes
#wal_log_hints = off			# also do full page writes of non-critical updates
					# (change requires restart)
#wal_compression = off			# enables compression of full-page writes;
					# off, pglz, lz4, zstd, or on
#wal_init_zero = on			# zero-fill new WAL files
#wal_recycle = on			# recycle WAL files
#wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
					# (change requires restart)
#wal_writer_delay = 200ms		# 1-10000 milliseconds
#wal_writer_flush_after = 1MB		# measured in pages, 0 disables
#wal_skip_threshold = 2MB

#commit_delay = 0			# range 0-100000, in microseconds
#commit_siblings = 5			# range 1-1000

# - Checkpoints -

#checkpoint_timeout = 5min		# range 30s-1d
#checkpoint_completion_target = 0.9	# checkpoint target duration, 0.0 - 1.0
#checkpoint_flush_after = 256kB		# measured in pages, 0 disables
#checkpoint_warning = 30s		# 0 disables
max_wal_size = 1GB
min_wal_size = 80MB

# - Prefetching during recovery -

#recovery_prefetch = try		# prefetch pages referenced in the WAL?
#wal_decode_buffer_size = 512kB		# lookahead window used for prefetching
					# (change requires restart)

# - Archiving -

#archive_mode = off		# enables archiving; off, on, or always
				# (change requires restart)
#archive_library = ''		# library to use to archive a WAL file
				# (empty string indicates archive_command should
				# be used)
#archive_command = ''		# command to use to archive a WAL file
				# placeholders: %p = path of file to archive
				#               %f = file name only
				# e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#archive_timeout = 0		# force a WAL file switch after this
				# number of seconds; 0 disables

# - Archive Recovery -

# These are only used in recovery mode.

#restore_command = ''		# command to use to restore an archived WAL file
				# placeholders: %p = path of file to restore
				#               %f = file name only
				# e.g. 'cp /mnt/server/archivedir/%f %p'
#archive_cleanup_command = ''	# command to execute at every restartpoint
#recovery_end_command = ''	# command to execute at completion of recovery

# - Recovery Target -

# Set these only when performing a targeted recovery.

#recovery_target = ''		# 'immediate' to end recovery as soon as a
                                # consistent state is reached
				# (change requires restart)
#recovery_target_name = ''	# the named restore point to which recovery will proceed
				# (change requires restart)
#recovery_target_time = ''	# the time stamp up to which recovery will proceed
				# (change requires restart)
#recovery_target_xid = ''	# the transaction ID up to which recovery will proceed
				# (change requires restart)
#recovery_target_lsn = ''	# the WAL LSN up to which recovery will proceed
				# (change requires restart)
#recovery_target_inclusive = on # Specifies whether to stop:
				# just after the specified recovery target (on)
				# just before the recovery target (off)
				# (change requires restart)
#recovery_target_timeline = 'latest'	# 'current', 'latest', or timeline ID
				# (change requires restart)
#recovery_target_action = 'pause'	# 'pause', 'promote', 'shutdown'
				# (change requires restart)


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Servers -

# Set these on the primary and on any standby that will send replication data.

#max_wal_senders = 10		# max number of walsender processes
				# (change requires restart)
#max_replication_slots = 10	# max number of replication slots
				# (change requires restart)
#wal_keep_size = 0		# in megabytes; 0 disables
#max_slot_wal_keep_size = -1	# in megabytes; -1 disables
#wal_sender_timeout = 60s	# in milliseconds; 0 disables
#track_commit_timestamp = off	# collect timestamp of transaction commit
				# (change requires restart)

# - Primary Server -

# These settings are ignored on a standby server.

#synchronous_standby_names = ''	# standby servers that provide sync rep
				# method to choose sync standbys, number of sync standbys,
				# and comma-separated list of application_name
				# from standby(s); '*' = all

# - Standby Servers -

# These settings are ignored on a primary server.

#primary_conninfo = ''			# connection string to sending server
#primary_slot_name = ''			# replication slot on sending server
#hot_standby = on			# "off" disallows queries during recovery
					# (change requires restart)
#max_standby_archive_delay = 30s	# max delay before canceling queries
					# when reading WAL from archive;
					# -1 allows indefinite delay
#max_standby_streaming_delay = 30s	# max delay before canceling queries
					# when reading streaming WAL;
					# -1 allows indefinite delay
#wal_receiver_create_temp_slot = off	# create temp slot if primary_slot_name
					# is not set
#wal_receiver_status_interval = 10s	# send replies at least this often
					# 0 disables
#hot_standby_feedback = off		# send info from standby to prevent
					# query conflicts
#wal_receiver_timeout = 60s		# time that receiver waits for
					# communication from primary
					# in milliseconds; 0 disables
#wal_retrieve_retry_interval = 5s	# time to wait before retrying to
					# retrieve WAL after a failed attempt
#recovery_min_apply_delay = 0		# minimum delay for applying changes during recovery

# - Subscribers -

# These settings are ignored on a publisher.

#max_logical_replication_workers = 4	# taken from max_worker_processes
					# (change requires restart)
#max_sync_workers_per_subscription = 2	# taken from max_logical_replication_workers
#max_parallel_apply_workers_per_subscription = 2	# taken from max_logical_replication_workers


#------------------------------------------------------------------------------
# QUERY TUNING
#------------------------------------------------------------------------------

# - Planner Method Configuration -

#enable_async_append = on
#enable_bitmapscan = on
#enable_gathermerge = on
#enable_hashagg = on
#enable_hashjoin = on
#enable_incremental_sort = on
#enable_indexscan = on
#enable_indexonlyscan = on
#enable_material = on
#enable_memoize = on
#enable_mergejoin = on
#enable_nestloop = on
#enable_parallel_append = on
#enable_parallel_hash = on
#enable_partition_pruning = on
#enable_partitionwise_join = off
#enable_partitionwise_aggregate = off
#enable_presorted_aggregate = on
#enable_seqscan = on
#enable_sort = on
#enable_tidscan = on

# - Planner Cost Constants -

#seq_page_cost = 1.0			# measured on an arbitrary scale
#random_page_cost = 4.0			# same scale as above
#cpu_tuple_cost = 0.01			# same scale as above
#cpu_index_tuple_cost = 0.005		# same scale as above
#cpu_operator_cost = 0.0025		# same scale as above
#parallel_setup_cost = 1000.0	# same scale as above
#parallel_tuple_cost = 0.1		# same scale as above
#min_parallel_table_scan_size = 8MB
#min_parallel_index_scan_size = 512kB
#effective_cache_size = 4GB

#jit_above_cost = 100000		# perform JIT compilation if available
					# and query more expensive than this;
					# -1 disables
#jit_inline_above_cost = 500000		# inline small functions if query is
					# more expensive than this; -1 disables
#jit_optimize_above_cost = 500000	# use expensive JIT optimizations if
					# query is more expensive than this;
					# -1 disables

# - Genetic Query Optimizer -

#geqo = on
#geqo_threshold = 12
#geqo_effort = 5			# range 1-10
#geqo_pool_size = 0			# selects default based on effort
#geqo_generations = 0			# selects default based on effort
#geqo_selection_bias = 2.0		# range 1.5-2.0
#geqo_seed = 0.0			# range 0.0-1.0

# - Other Planner Options -

#default_statistics_target = 100	# range 1-10000
#constraint_exclusion = partition	# on, off, or partition
#cursor_tuple_fraction = 0.1		# range 0.0-1.0
#from_collapse_limit = 8
#jit = on				# allow JIT compilation
#join_collapse_limit = 8		# 1 disables collapsing of explicit
					# JOIN clauses
#plan_cache_mode = auto			# auto, force_generic_plan or
					# force_custom_plan
#recursive_worktable_factor = 10.0	# range 0.001-1000000


#------------------------------------------------------------------------------
# REPORTING AND LOGGING
#------------------------------------------------------------------------------

# - Where to Log -

#log_destination = 'stderr'		# Valid values are combinations of
					# stderr, csvlog, jsonlog, syslog, and
					# eventlog, depending on platform.
					# csvlog and jsonlog require
					# logging_collector to be on.

# This is used when logging to stderr:
#logging_collector = off		# Enable capturing of stderr, jsonlog,
					# and csvlog into log files. Required
					# to be on for csvlogs and jsonlogs.
					# (change requires restart)

# These are only used if logging_collector is on:
#log_directory = 'log'			# directory where log files are written,
					# can be absolute or relative to PGDATA
#log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'	# log file name pattern,
					# can include strftime() escapes
#log_file_mode = 0600			# creation mode for log files,
					# begin with 0 to use octal notation
#log_rotation_age = 1d			# Automatic rotation of logfiles will
					# happen after that time.  0 disables.
#log_rotation_size = 10MB		# Automatic rotation of logfiles will
					# happen after that much log output.
					# 0 disables.
#log_truncate_on_rotation = off		# If on, an existing log file with the
					# same name as the new log file will be
					# truncated rather than appended to.
					# But such truncation only occurs on
					# time-driven rotation, not on restarts
					# or size-driven rotation.  Default is
					# off, meaning append to existing files
					# in all cases.

# These are relevant when logging to syslog:
#syslog_facility = 'LOCAL0'
#syslog_ident = 'postgres'
#syslog_sequence_numbers = on
#syslog_split_messages = on

# This is only relevant when logging to eventlog (Windows):
# (change requires restart)
#event_source = 'PostgreSQL'

# - When to Log -

#log_min_messages = warning		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic

#log_min_error_statement = error	# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   info
					#   notice
					#   warning
					#   error
					#   log
					#   fatal
					#   panic (effectively off)

#log_min_duration_statement = -1	# -1 is disabled, 0 logs all statements
					# and their durations, > 0 logs only
					# statements running at least this number
					# of milliseconds

#log_min_duration_sample = -1		# -1 is disabled, 0 logs a sample of statements
					# and their durations, > 0 logs only a sample of
					# statements running at least this number
					# of milliseconds;
					# sample fraction is determined by log_statement_sample_rate

#log_statement_sample_rate = 1.0	# fraction of logged statements exceeding
					# log_min_duration_sample to be logged;
					# 1.0 logs all such statements, 0.0 never logs


#log_transaction_sample_rate = 0.0	# fraction of transactions whose statements
					# are logged regardless of their duration; 1.0 logs all
					# statements from all transactions, 0.0 never logs

#log_startup_progress_interval = 10s	# Time between progress updates for
					# long-running startup operations.
					# 0 disables the feature, > 0 indicates
					# the interval in milliseconds.

# - What to Log -

#debug_print_parse = off
#debug_print_rewritten = off
#debug_print_plan = off
#debug_pretty_print = on
#log_autovacuum_min_duration = 10min	# log autovacuum activity;
					# -1 disables, 0 logs all actions and
					# their durations, > 0 logs only
					# actions running at least this number
					# of milliseconds.
#log_checkpoints = on
#log_connections = off
#log_disconnections = off
#log_duration = off
#log_error_verbosity = default		# terse, default, or verbose messages
#log_hostname = off
#log_line_prefix = '%m [%p] '		# special values:
					#   %a = application name
					#   %u = user name
					#   %d = database name
					#   %r = remote host and port
					#   %h = remote host
					#   %b = backend type
					#   %p = process ID
					#   %P = process ID of parallel group leader
					#   %t = timestamp without milliseconds
					#   %m = timestamp with milliseconds
					#   %n = timestamp with milliseconds (as a Unix epoch)
					#   %Q = query ID (0 if none or not computed)
					#   %i = command tag
					#   %e = SQL state
					#   %c = session ID
					#   %l = session line number
					#   %s = session start timestamp
					#   %v = virtual transaction ID
					#   %x = transaction ID (0 if none)
					#   %q = stop here in non-session
					#        processes
					#   %% = '%'
					# e.g. '<%u%%%d> '
#log_lock_waits = off			# log lock waits >= deadlock_timeout
#log_recovery_conflict_waits = off	# log standby recovery conflict waits
					# >= deadlock_timeout
#log_parameter_max_length = -1		# when logging statements, limit logged
					# bind-parameter values to N bytes;
					# -1 means print in full, 0 disables
#log_parameter_max_length_on_error = 0	# when logging an error, limit logged
					# bind-parameter values to N bytes;
					# -1 means print in full, 0 disables
#log_statement = 'none'			# none, ddl, mod, all
#log_replication_commands = off
#log_temp_files = -1			# log temporary files equal or larger
					# than the specified size in kilobytes;
					# -1 disables, 0 logs all temp files
log_timezone = UTC

# - Process Title -

#cluster_name = ''			# added to process titles if nonempty
					# (change requires restart)
#update_process_title = on


#------------------------------------------------------------------------------
# STATISTICS
#------------------------------------------------------------------------------

# - Cumulative Query and Index Statistics -

#track_activities = on
#track_activity_query_size = 1024	# (change requires restart)
#track_counts = on
#track_io_timing = off
#track_wal_io_timing = off
#track_functions = none			# none, pl, all
#stats_fetch_consistency = cache	# cache, none, snapshot


# - Monitoring -

#compute_query_id = auto
#log_statement_stats = off
#log_parser_stats = off
#log_planner_stats = off
#log_executor_stats = off


#------------------------------------------------------------------------------
# AUTOVACUUM
#------------------------------------------------------------------------------

#autovacuum = on			# Enable autovacuum subprocess?  'on'
					# requires track_counts to also be on.
#autovacuum_max_workers = 3		# max number of autovacuum subprocesses
					# (change requires restart)
#autovacuum_naptime = 1min		# time between autovacuum runs
#autovacuum_vacuum_threshold = 50	# min number of row updates before
					# vacuum
#autovacuum_vacuum_insert_threshold = 1000	# min number of row inserts
					# before vacuum; -1 disables insert
					# vacuums
#autovacuum_analyze_threshold = 50	# min number of row updates before
					# analyze
#autovacuum_vacuum_scale_factor = 0.2	# fraction of table size before vacuum
#autovacuum_vacuum_insert_scale_factor = 0.2	# fraction of inserts over table
					# size before insert vacuum
#autovacuum_analyze_scale_factor = 0.1	# fraction of table size before analyze
#autovacuum_freeze_max_age = 200000000	# maximum XID age before forced vacuum
					# (change requires restart)
#autovacuum_multixact_freeze_max_age = 400000000	# maximum multixact age
					# before forced vacuum
					# (change requires restart)
#autovacuum_vacuum_cost_delay = 2ms	# default vacuum cost delay for
					# autovacuum, in milliseconds;
					# -1 means use vacuum_cost_delay
#autovacuum_vacuum_cost_limit = -1	# default vacuum cost limit for
					# autovacuum, -1 means use
					# vacuum_cost_limit


#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

#client_min_messages = notice		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   log
					#   notice
					#   warning
					#   error
#search_path = '"$user", public'	# schema names
#row_security = on
#default_table_access_method = 'heap'
#default_tablespace = ''		# a tablespace name, '' uses the default
#default_toast_compression = 'pglz'	# 'pglz' or 'lz4'
#temp_tablespaces = ''			# a list of tablespace names, '' uses
					# only default tablespace
#check_function_bodies = on
#default_transaction_isolation = 'read committed'
#default_transaction_read_only = off
#default_transaction_deferrable = off
#session_replication_role = 'origin'
#statement_timeout = 0			# in milliseconds, 0 is disabled
#lock_timeout = 0			# in milliseconds, 0 is disabled
#idle_in_transaction_session_timeout = 0	# in milliseconds, 0 is disabled
#idle_session_timeout = 0		# in milliseconds, 0 is disabled
#vacuum_freeze_table_age = 150000000
#vacuum_freeze_min_age = 50000000
#vacuum_failsafe_age = 1600000000
#vacuum_multixact_freeze_table_age = 150000000
#vacuum_multixact_freeze_min_age = 5000000
#vacuum_multixact_failsafe_age = 1600000000
#bytea_output = 'hex'			# hex, escape
#xmlbinary = 'base64'
#xmloption = 'content'
#gin_pending_list_limit = 4MB
#createrole_self_grant = ''		# set and/or inherit

# - Locale and Formatting -

datestyle = 'iso, mdy'
#intervalstyle = 'postgres'
timezone = UTC
#timezone_abbreviations = 'Default'     # Select the set of available time zone
					# abbreviations.  Currently, there are
					#   Default
					#   Australia (historical usage)
					#   India
					# You can create your own file in
					# share/timezonesets/.
#extra_float_digits = 1			# min -15, max 3; any value >0 actually
					# selects precise output mode
#client_encoding = sql_ascii		# actually, defaults to database
					# encoding

# These settings are initialized by initdb, but they can be changed.
lc_messages = 'en_US.utf8'		# locale for system error message
					# strings
lc_monetary = 'en_US.utf8'		# locale for monetary formatting
lc_numeric = 'en_US.utf8'		# locale for number formatting
lc_time = 'en_US.utf8'			# locale for time formatting

#icu_validation_level = warning		# report ICU locale validation
					# errors at the given level

# default configuration for text search
default_text_search_config = 'pg_catalog.english'

# - Shared Library Preloading -

#local_preload_libraries = ''
#session_preload_libraries = ''
#shared_preload_libraries = ''	# (change requires restart)
#jit_provider = 'llvmjit'		# JIT library to use

# - Other Defaults -

#dynamic_library_path = '$libdir'
#gin_fuzzy_search_limit = 0


#------------------------------------------------------------------------------
# LOCK MANAGEMENT
#------------------------------------------------------------------------------

#deadlock_timeout = 1s
#max_locks_per_transaction = 64		# min 10
					# (change requires restart)
#max_pred_locks_per_transaction = 64	# min 10
					# (change requires restart)
#max_pred_locks_per_relation = -2	# negative values mean
					# (max_pred_locks_per_transaction
					#  / -max_pred_locks_per_relation) - 1
#max_pred_locks_per_page = 2            # min 0


#------------------------------------------------------------------------------
# VERSION AND PLATFORM COMPATIBILITY
#------------------------------------------------------------------------------

# - Previous PostgreSQL Versions -

#array_nulls = on
#backslash_quote = safe_encoding	# on, off, or safe_encoding
#escape_string_warning = on
#lo_compat_privileges = off
#quote_all_identifiers = off
#standard_conforming_strings = on
#synchronize_seqscans = on

# - Other Platforms and Clients -

#transform_null_equals = off


#------------------------------------------------------------------------------
# ERROR HANDLING
#------------------------------------------------------------------------------

#exit_on_error = off			# terminate session on any error?
#restart_after_crash = on		# reinitialize after backend crash?
#data_sync_retry = off			# retry or panic on failure to fsync
					# data?
					# (change requires restart)
#recovery_init_sync_method = fsync	# fsync, syncfs (Linux 5.8+)


#------------------------------------------------------------------------------
# CONFIG FILE INCLUDES
#------------------------------------------------------------------------------

# These options allow settings to be loaded from files other than the
# default postgresql.conf.  Note that these are directives, not variable
# assignments, so they can usefully be given more than once.

#include_dir = '...'			# include files ending in '.conf' from
					# a directory, e.g., 'conf.d'
#include_if_exists = '...'		# include file only if it exists
#include = '...'			# include file


#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here
</file>

<file path="backup/postgres/data/postmaster.opts">
/usr/local/bin/postgres
</file>

<file path="backup/postgres/data/postmaster.pid">
1
/var/lib/postgresql/data
1752085557
5432
/var/run/postgresql
*
   475144         0
ready
</file>

<file path="data/myid">
1
</file>

<file path="README.md">
# schedule-core
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/HorarioValidator.java">
package com.schedulecore.ufu.domains.chainresponsibility.newschedule;

import com.schedulecore.ufu.domains.chainresponsibility.ScheduleValidator;
import com.schedulecore.ufu.domains.models.NewSchedule;

public class HorarioValidator extends ScheduleValidator {
    @Override
    public boolean check(NewSchedule schedule) {
    if (schedule.getHorario() == null)
        throw new IllegalArgumentException("Schedule time cannot be null");
    if(schedule.getHorario().toLocalTime().getMinute() != 0 || schedule.getHorario().toLocalTime().getSecond() != 0)
        throw new IllegalArgumentException("Schedule time cannot have minutes or seconds, only hours are allowed");

    return checkNext(schedule);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/RestricaoValidator.java">
package com.schedulecore.ufu.domains.chainresponsibility.newschedule;

import com.schedulecore.ufu.domains.chainresponsibility.ScheduleValidator;
import com.schedulecore.ufu.domains.models.NewSchedule;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class RestricaoValidator extends ScheduleValidator {
    private final DatabasePort databasePort;

    @Override
    public boolean check(NewSchedule schedule) {
        databasePort.findRestricaoByGinasioAndData(
                schedule.getGinasio(),
                schedule.getData()).ifPresent(
                restricao -> {
                    throw new IllegalArgumentException("Schedule cannot be created due to a restriction: " + restricao);
                }
        );
        return checkNext(schedule);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/ScheduleDuplicated.java">
package com.schedulecore.ufu.domains.chainresponsibility.newschedule;

import com.schedulecore.ufu.domains.chainresponsibility.ScheduleValidator;
import com.schedulecore.ufu.domains.models.NewSchedule;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ScheduleDuplicated extends ScheduleValidator {
    private final DatabasePort databasePort;

    @Override
    public boolean check(NewSchedule schedule) {
        databasePort.findScheduleByHorarioAndMounthDayAndGinasio(
                schedule.getHorario(),
                schedule.getData(),
                schedule.getGinasio()
        ).ifPresent(model -> {
            throw new IllegalArgumentException("Schedule already exists for the given time and date: " + model);
        });
        return checkNext(schedule);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/chainresponsibility/ScheduleValidator.java">
package com.schedulecore.ufu.domains.chainresponsibility;

import com.schedulecore.ufu.domains.models.NewSchedule;

public abstract class ScheduleValidator {
    private ScheduleValidator nextValidator;

    public static ScheduleValidator link(ScheduleValidator first, ScheduleValidator... chain) {
        ScheduleValidator head = first;
        for (ScheduleValidator nextInChain: chain) {
            head.nextValidator = nextInChain;
            head = nextInChain;
        }
        return first;
    }

    public abstract boolean check(NewSchedule schedule);

    protected boolean checkNext(NewSchedule schedule) {
        if (nextValidator == null) {
            return true;
        }
        return nextValidator.check(schedule);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/inputs/CreateOrUpdateGinasioInput.java">
package com.schedulecore.ufu.domains.inputs;


import com.schedulecore.ufu.domains.models.GinasioModel;
import lombok.Builder;
import lombok.Data;

import java.sql.Time;

@Data
@Builder
public class CreateOrUpdateGinasioInput {
    private String nome;
    private String campus;
    private Time startTime;
    private Time endTime;

    public GinasioModel toModel() {
        return GinasioModel.builder()
                .nome(nome)
                .campus(campus)
                .startTime(startTime)
                .endTime(endTime)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/inputs/RestricaoInput.java">
package com.schedulecore.ufu.domains.inputs;

import com.schedulecore.ufu.domains.models.RestricaoModel;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;

@Data
@Builder
public class RestricaoInput {
    private String ginasio;
    private Date data;
    private String descricao;

    public RestricaoModel toModel() {
        return RestricaoModel.builder()
                .ginasio(ginasio)
                .data(data)
                .descricao(descricao)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/models/GinasioModel.java">
package com.schedulecore.ufu.domains.models;

import lombok.Builder;
import lombok.Data;

import java.sql.Time;

@Data
@Builder
public class GinasioModel {
    private String nome;
    private String campus;
    private Time startTime;
    private Time endTime;
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/models/RestricaoModel.java">
package com.schedulecore.ufu.domains.models;


import lombok.Builder;
import lombok.Data;

import java.sql.Date;

@Data
@Builder
public class RestricaoModel {
    private String ginasio;
    private Date data;
    private String descricao;

}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/models/UserModel.java">
package com.schedulecore.ufu.domains.models;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class UserModel {
    private String matricula;
    private String nome;
    private String email;
    private String telefone;
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/ports/EmailSenderPort.java">
package com.schedulecore.ufu.domains.ports;

public interface EmailSenderPort {
    void sendEmail(String to, String subject, String body);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/ginasio/CreateOrUpdateGinasio.java">
package com.schedulecore.ufu.domains.resourses.ginasio;

import com.schedulecore.ufu.domains.inputs.CreateOrUpdateGinasioInput;

public interface CreateOrUpdateGinasio {
    void execute(CreateOrUpdateGinasioInput input);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/ginasio/DeleteGinasio.java">
package com.schedulecore.ufu.domains.resourses.ginasio;

public interface DeleteGinasio {
    void execute(String nomeGinasio);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/restricao/CreateRestricao.java">
package com.schedulecore.ufu.domains.resourses.restricao;

import com.schedulecore.ufu.domains.inputs.RestricaoInput;

public interface CreateRestricao {
    void execute(RestricaoInput input);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/restricao/DeleteRestricao.java">
package com.schedulecore.ufu.domains.resourses.restricao;

import com.schedulecore.ufu.domains.inputs.RestricaoInput;

public interface DeleteRestricao {
    void execute(RestricaoInput input);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/schedule/CreateSchedule.java">
package com.schedulecore.ufu.domains.resourses.schedule;

import com.schedulecore.ufu.domains.inputs.CreateScheduleInput;

public interface CreateSchedule {

     void execute(CreateScheduleInput input);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/schedule/DeleteSchedule.java">
package com.schedulecore.ufu.domains.resourses.schedule;

import com.schedulecore.ufu.domains.inputs.DeleteScheduleInput;

public interface DeleteSchedule {

    void execute(DeleteScheduleInput input);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/resourses/schedule/GetSchedules.java">
package com.schedulecore.ufu.domains.resourses.schedule;

import com.schedulecore.ufu.domains.inputs.GetSchedulesInput;
import com.schedulecore.ufu.domains.models.ScheduleModel;

import java.util.List;

public interface GetSchedules {
    List<ScheduleModel> get(GetSchedulesInput input);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/ginasio/CreateOrUpdateGinasioImpl.java">
package com.schedulecore.ufu.domains.usecases.ginasio;

import com.schedulecore.ufu.domains.inputs.CreateOrUpdateGinasioInput;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.resourses.ginasio.CreateOrUpdateGinasio;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class CreateOrUpdateGinasioImpl implements CreateOrUpdateGinasio {
    private final DatabasePort databasePort;
    @Override
    public void execute(CreateOrUpdateGinasioInput input) {
        databasePort.findGinasioById(input.getNome())
                .ifPresentOrElse(
                        ginasio -> databasePort.updateGinasio(input.toModel()),
                        () -> databasePort.saveGinasio(input.toModel())
                );
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/ginasio/DeleteGinasioImpl.java">
package com.schedulecore.ufu.domains.usecases.ginasio;

import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.resourses.ginasio.DeleteGinasio;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class DeleteGinasioImpl implements DeleteGinasio {
    private final DatabasePort databasePort;

    @Override
    public void execute(String nomeGinasio) {
        databasePort.deleteGinasio(nomeGinasio);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/restricao/CreateRestricaoImpl.java">
package com.schedulecore.ufu.domains.usecases.restricao;

import com.schedulecore.ufu.domains.inputs.RestricaoInput;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.resourses.restricao.CreateRestricao;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Date;

@Service
@RequiredArgsConstructor
public class CreateRestricaoImpl implements CreateRestricao {
    private final DatabasePort databasePort;

    @Override
    public void execute(RestricaoInput input) {
        if (input.getData() == null)
            throw new IllegalArgumentException("Date cannot be null");
        if(input.getData().before(Date.from(Instant.now())))
            throw new IllegalArgumentException("Date cannot be in the past, data invalid: " + input.getData());
        databasePort.findGinasioById(input.getGinasio())
                .orElseThrow(() -> new IllegalArgumentException("Ginasio not found with id: " + input.getGinasio()));
        databasePort.saveRestricao(input.toModel());
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/restricao/DeleteRestricaoImpl.java">
package com.schedulecore.ufu.domains.usecases.restricao;

import com.schedulecore.ufu.domains.inputs.RestricaoInput;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.resourses.restricao.DeleteRestricao;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class DeleteRestricaoImpl implements DeleteRestricao {
    private final DatabasePort databasePort;

    @Override
    public void execute(RestricaoInput input) {
        databasePort.deleteRestricao(input.toModel());
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/schedule/CreateScheduleImpl.java">
package com.schedulecore.ufu.domains.usecases.schedule;

import com.schedulecore.ufu.domains.chainresponsibility.ScheduleValidator;
import com.schedulecore.ufu.domains.chainresponsibility.newschedule.*;
import com.schedulecore.ufu.domains.inputs.CreateScheduleInput;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.resourses.schedule.CreateSchedule;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class CreateScheduleImpl implements CreateSchedule {
    private final DatabasePort databasePort;

    @Override
    public void execute(CreateScheduleInput input) {
        validator().check(input.toModel());
        databasePort.saveSchedule(input.toModel());

    }

    public ScheduleValidator validator(){
        return ScheduleValidator.link(
                new DateValidator(),
                new HorarioValidator(),
                new GinasioValidator(databasePort),
                new RestricaoValidator(databasePort),
                new ScheduleDuplicated(databasePort)
        );
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/schedule/DeleteScheduleImpl.java">
package com.schedulecore.ufu.domains.usecases.schedule;

import com.schedulecore.ufu.domains.inputs.DeleteScheduleInput;
import com.schedulecore.ufu.domains.models.ScheduleModel;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.ports.EmailSenderPort;
import com.schedulecore.ufu.domains.resourses.schedule.DeleteSchedule;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class DeleteScheduleImpl implements DeleteSchedule {
    private final DatabasePort databasePort;
    private final EmailSenderPort emailSenderPort;

    @Override
    public void execute(DeleteScheduleInput input) {
        String email = databasePort.findScheduleByHorarioAndMounthDayAndGinasio(input.getHorario(), input.getData(), input.getGinasio()).map(ScheduleModel::getEmail).orElseThrow(() -> new IllegalArgumentException("Schedule not found"));
        databasePort.deleteSchedule(input.getHorario(), input.getData(), input.getGinasio(), input.getMatriculaAluno());
        emailSenderPort.sendEmail(email,
                "Seu Agendamento Foi Cancelado - Ginasio: " + input.getGinasio() + " Data: " + input.getData(),
                "Seu Agendamento foi cancelado das " + input.getHorario() + " na data  " + input.getData() + " no ginásio " + input.getGinasio() + ", podendo ter sido cancelado pelo administrador do sistema."
        );
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/usecases/schedule/GetSchedulesImpl.java">
package com.schedulecore.ufu.domains.usecases.schedule;

import com.schedulecore.ufu.domains.inputs.GetSchedulesInput;
import com.schedulecore.ufu.domains.models.GinasioModel;
import com.schedulecore.ufu.domains.models.ScheduleModel;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.domains.resourses.schedule.GetSchedules;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.sql.Time;
import java.util.*;

@Service
@RequiredArgsConstructor
public class GetSchedulesImpl implements GetSchedules {
    private final DatabasePort databasePort;

    @Override
    public List<ScheduleModel> get(GetSchedulesInput input) {
        HashMap<Time, ScheduleModel> scheduleMap = new HashMap<>();
        input.getGinasio().map(
                ginasio -> databasePort.findSchedulesByGinasioAndMonthAndDay(input.getData(), ginasio))
                .orElseGet(() -> databasePort.findSchedulesByMonthAndDay(input.getData())).forEach(
                        schedule -> {
                            scheduleMap.put(schedule.getHorario(), schedule);
                        }
                );
        Optional<GinasioModel> model = input.getGinasio().flatMap(databasePort::findGinasioById);
        if (model.isPresent()) {
            Time horario = model.get().getStartTime();
            while (model.get().getEndTime().after(horario)) {
                if (!scheduleMap.containsKey(horario)) {
                    scheduleMap.put(horario, ScheduleModel.builder()
                            .data(input.getData())
                            .ginasio(model.get().getNome())
                            .campus(model.get().getCampus())
                            .horario(horario)
                            .build()
                    );
                }
                horario = Time.valueOf(horario.toLocalTime().plusHours(1));
            }
        }
        List<ScheduleModel> result = new ArrayList<>(scheduleMap.values());
        result.sort(Comparator.comparing(ScheduleModel::getHorario));
        return result;
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/request/RestricaoRequest.java">
package com.schedulecore.ufu.infrasctructure.api.request;

import com.schedulecore.ufu.domains.inputs.RestricaoInput;
import jakarta.validation.constraints.NotNull;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.time.LocalDate;

@Data
@Builder
public class RestricaoRequest {
    @NotNull
    private String ginasio;
    @NotNull
    private LocalDate data;
    private String descricao;

    public RestricaoInput toInput() {
        return RestricaoInput.builder()
                .ginasio(ginasio)
                .data(Date.valueOf(data))
                .descricao(descricao)
                .build();
    }


}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/RestricaoEntity.java">
package com.schedulecore.ufu.infrasctructure.database.entitys;

import com.schedulecore.ufu.domains.models.RestricaoModel;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Date;

@Entity
@Table(name = "restricoes")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class RestricaoEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String ginasio;
    private Date data;
    private String descricao;

    public RestricaoEntity(String ginasio, Date data, String descricao) {
        this.ginasio = ginasio;
        this.data = data;
        this.descricao = descricao != null ? descricao : "sem descricao";
    }

    public RestricaoModel toModel() {
        return RestricaoModel.builder()
                .ginasio(ginasio)
                .data(data)
                .descricao(descricao)
                .build();
    }

}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/UserEntity.java">
package com.schedulecore.ufu.infrasctructure.database.entitys;

import com.schedulecore.ufu.domains.models.UserModel;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "usuarios")
@Data
@NoArgsConstructor
public class UserEntity {
    @Id
    private String matricula;
    private String nome;
    private String email;
    private String telefone;

    public UserModel toModel() {
        return UserModel.builder()
                .matricula(matricula)
                .nome(nome)
                .email(email)
                .telefone(telefone)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/GinasioRepository.java">
package com.schedulecore.ufu.infrasctructure.database.repositorys;

import com.schedulecore.ufu.infrasctructure.database.entitys.GinasioEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GinasioRepository extends JpaRepository<GinasioEntity, String> {
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/RestricaoRepository.java">
package com.schedulecore.ufu.infrasctructure.database.repositorys;

import com.schedulecore.ufu.infrasctructure.database.entitys.GinasioEntity;
import com.schedulecore.ufu.infrasctructure.database.entitys.RestricaoEntity;
import org.springframework.data.jpa.repository.JpaRepository;

import java.sql.Date;

public interface RestricaoRepository extends JpaRepository<RestricaoEntity, Long> {
    RestricaoEntity findByGinasioAndData(String ginasio, Date data);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/UserRepository.java">
package com.schedulecore.ufu.infrasctructure.database.repositorys;

import com.schedulecore.ufu.infrasctructure.database.entitys.UserEntity;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<UserEntity, String> {
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/emailsender/EmailSenderAdapter.java">
package com.schedulecore.ufu.infrasctructure.emailsender;

import com.schedulecore.ufu.domains.ports.EmailSenderPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class EmailSenderAdapter implements EmailSenderPort {
    @Value("${spring.mail.username}")
    private String email;
    private final JavaMailSender mailSender;
    @Override
    public void sendEmail(String to, String subject, String body) {
        SimpleMailMessage mensagem = new SimpleMailMessage();
        mensagem.setTo(to);
        mensagem.setSubject(subject);
        mensagem.setText(body);
        mensagem.setFrom(email);
        mailSender.send(mensagem);
        log.info("E-mail enviado com sucesso para: {}, assunto: {}", to, subject);

    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/errorHandler/ErrorHandler.java">
package com.schedulecore.ufu.infrasctructure.errorHandler;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
@Slf4j
public class ErrorHandler {

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> handleIllegalArgument(IllegalArgumentException ex) {
        log.error("Illegal argument exception in class {} in {}: {}", ex.getStackTrace()[0].getClassName(), ex.getStackTrace()[0].getMethodName(), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(ex.getMessage());
    }
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGenericException(Exception ex) {
        log.error("Unexpected error occurred in class {} in {}: {}", ex.getStackTrace()[0].getClassName(), ex.getStackTrace()[0].getMethodName(), ex.getMessage());
        return ResponseEntity
                .status(HttpStatus.UNPROCESSABLE_ENTITY)
                .body("Ocorreu um erro inesperado: " + ex.getMessage());
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/ScheduleCoreApplication.java">
package com.schedulecore.ufu;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ScheduleCoreApplication {

	public static void main(String[] args) {
		SpringApplication.run(ScheduleCoreApplication.class, args);
	}

}
</file>

<file path="src/main/resources/application-docker.yml">
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/SCHEDULEDB
    username: user
    password: user
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
</file>

<file path="src/main/resources/application-localdb.yml">
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/SCHEDULEDB
    username: user
    password: user
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/DateValidator.java">
package com.schedulecore.ufu.domains.chainresponsibility.newschedule;

import com.schedulecore.ufu.domains.chainresponsibility.ScheduleValidator;
import com.schedulecore.ufu.domains.models.NewSchedule;

import java.time.Instant;
import java.time.LocalDate;
import java.util.Date;

public class DateValidator extends ScheduleValidator {
    @Override
    public boolean check(NewSchedule schedule) {
    if (schedule.getData() == null)
        throw new IllegalArgumentException("Date cannot be null");
    if(schedule.getData().before(Date.from(Instant.now())))
        throw new IllegalArgumentException("Date cannot be in the past, data invalid: " + schedule.getData());

    return checkNext(schedule);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/inputs/DeleteScheduleInput.java">
package com.schedulecore.ufu.domains.inputs;

import com.schedulecore.ufu.domains.models.NewSchedule;
import com.schedulecore.ufu.domains.models.enums.CampusEnum;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.sql.Time;
import java.time.MonthDay;

@Data
@Builder
public class DeleteScheduleInput {
    private Time horario;
    private Date data;
    private String ginasio;
    private String matriculaAluno;

}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/models/enums/CampusEnum.java">
package com.schedulecore.ufu.domains.models.enums;

public enum CampusEnum {

    FAEFI( "Campus Faculdade de Educação Física e Fisioterapia"),
    SANTA_MONICA("Campus Santa Mônica"),
    GLORIA("Campus Glória"),
    UMUARAMA("Campus Umuarama");
    private final String description;

    CampusEnum(String description) {
        this.description = description;
    }

    public static CampusEnum valueOfOrDefault(String name) {
        for (CampusEnum campus : CampusEnum.values()) {
            if (campus.name().equalsIgnoreCase(name)) {
                return campus;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/request/CreateGinasioRequest.java">
package com.schedulecore.ufu.infrasctructure.api.request;

import com.schedulecore.ufu.domains.inputs.CreateOrUpdateGinasioInput;
import com.schedulecore.ufu.domains.models.enums.CampusEnum;
import jakarta.validation.constraints.NotNull;
import lombok.Builder;
import lombok.Data;

import java.sql.Time;

@Data
@Builder
public class CreateGinasioRequest {
    @NotNull
    private String nome;
    @NotNull
    private String campus;
    @NotNull
    private Time startTime;
    @NotNull
    private Time endTime;

    public CreateOrUpdateGinasioInput toInput() {
        return CreateOrUpdateGinasioInput.builder()
                .nome(nome)
                .campus(CampusEnum.valueOf(campus.toUpperCase()).name())
                .startTime(startTime)
                .endTime(endTime)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/request/DeleteScheduleRequest.java">
package com.schedulecore.ufu.infrasctructure.api.request;

import com.schedulecore.ufu.domains.inputs.DeleteScheduleInput;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.sql.Time;
import java.time.LocalDate;
import java.time.MonthDay;

@Data
@Builder
public class DeleteScheduleRequest {
    @NotBlank
    private Time horario;
    @NotNull
    private LocalDate data;
    @NotBlank
    private String ginasio;
    @NotBlank
    private String matriculaAluno;


    public DeleteScheduleInput toInput() {
        return DeleteScheduleInput.builder()
                .horario(horario)
                .data(Date.valueOf(data))
                .ginasio(ginasio)
                .matriculaAluno(matriculaAluno)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/GinasioEntity.java">
package com.schedulecore.ufu.infrasctructure.database.entitys;

import com.schedulecore.ufu.domains.models.GinasioModel;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Time;
import java.util.Optional;

@Entity
@Data
@NoArgsConstructor
@Table(name = "ginasios")
public class GinasioEntity {
    @Id
    private String nome;
    private String campus;
    private Time startTime;
    private Time endTime;

    public Optional<GinasioModel> toModel() {
        return Optional.of(GinasioModel.builder()
                .nome(nome)
                .campus(campus)
                .startTime(startTime)
                .endTime(endTime)
                .build());
    }
}
</file>

<file path="src/test/firstcolletion.yaml">
type: collection.insomnia.rest/5.0
name: My first collection
meta:
  id: wrk_17f25e828ffa43d7b43b60335c138c57
  created: 1750011429478
  modified: 1750011429478
  description: ""
collection:
  - url: localhost:3000/v1/schedule
    name: My first request
    meta:
      id: req_bf1ee3c1313d4e50bb1c38389e14f08d
      created: 1750011429579
      modified: 1751505435362
      isPrivate: false
      description: ""
      sortKey: -1750011429579
    method: GET
    body:
      mimeType: application/json
      text: |-
        {
          "data" : "2025-03-10",
        	"ginasio" : "Poliesportiva azul"
        }
    headers:
      - name: Content-Type
        value: application/json
      - name: User-Agent
        value: insomnia/11.2.0
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies:
        send: true
        store: true
      rebuildPath: true
  - url: localhost:3000/v1/schedule
    name: New Request
    meta:
      id: req_9cd8a1e68235440091390f31546fed76
      created: 1750294635758
      modified: 1751510106154
      isPrivate: false
      description: ""
      sortKey: -1750294635759
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "data" : "2025-03-10",
          "horario": "17:00:00",
          "ginasio": "Poliesportiva azul",
          "responsavel": "Felipe Machado",
          "curso": "Sistema de Informação",
          "campus": "SANTA_MONICA",
          "matriculaAluno": "12121BSI227",
          "telefone": "34999999999",
          "quantidadePessoas": 10
        }
    headers:
      - name: Content-Type
        value: application/json
      - name: User-Agent
        value: insomnia/11.2.0
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies:
        send: true
        store: true
      rebuildPath: true
  - url: localhost:3000/v1/adm/ginasio
    name: New Request
    meta:
      id: req_1f0f5027ea4a4b5db3d1c908f522d712
      created: 1750806143562
      modified: 1751503177533
      isPrivate: false
      description: ""
      sortKey: -1750806143562
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "nome": "Poliesportiva azul",
          "campus": "SANTA_MONICA",
          "startTime": "08:00:00",
          "endTime": "18:00:00"
        }
    headers:
      - name: Content-Type
        value: application/json
      - name: User-Agent
        value: insomnia/11.2.0
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies:
        send: true
        store: true
      rebuildPath: true
  - url: localhost:3000/v1/schedule/delete
    name: New Request
    meta:
      id: req_00e4f26cc4d648a0bc20c07f45275f65
      created: 1751026378522
      modified: 1751510204749
      isPrivate: false
      description: ""
      sortKey: -1751026378522
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "data" : "2025-03-10",
          "horario": "17:00:00",
          "ginasio": "Poliesportiva azul",
          "responsavel": "Gabriel Machado",
          "curso": "Sistema de Informação",
          "campus": "SANTA_MONICA",
          "matriculaAluno": "12121BSI227",
          "telefone": "34999999999",
          "quantidadePessoas": 10
        }
    headers:
      - name: Content-Type
        value: application/json
      - name: User-Agent
        value: insomnia/11.2.0
    settings:
      renderRequestBody: true
      encodeUrl: true
      followRedirects: global
      cookies:
        send: true
        store: true
      rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_6d338c41f0305cca792a23d09baeae1fd2c59a65
    created: 1750011429510
    modified: 1750011429510
environments:
  name: Base Environment
  meta:
    id: env_6d338c41f0305cca792a23d09baeae1fd2c59a65
    created: 1750011429491
    modified: 1750011429491
    isPrivate: false
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/chainresponsibility/newschedule/GinasioValidator.java">
package com.schedulecore.ufu.domains.chainresponsibility.newschedule;

import com.schedulecore.ufu.domains.chainresponsibility.ScheduleValidator;
import com.schedulecore.ufu.domains.models.GinasioModel;
import com.schedulecore.ufu.domains.models.NewSchedule;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class GinasioValidator extends ScheduleValidator {
    private final DatabasePort databasePort;

    @Override
    public boolean check(NewSchedule schedule) {
        GinasioModel ginasioModel = databasePort.findGinasioById(schedule.getGinasio()).orElseThrow(
                () -> new IllegalArgumentException("Ginasio not found with: " + schedule.getGinasio())
        );
        if (schedule.getHorario().before(ginasioModel.getStartTime()) ||
            schedule.getHorario().after(ginasioModel.getEndTime()) ||
                schedule.getHorario().equals(ginasioModel.getEndTime())
        ) {
            throw new IllegalArgumentException("Schedule time is out of Ginasio operating hours: " + ginasioModel);
        }
        return checkNext(schedule);
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/models/NewSchedule.java">
package com.schedulecore.ufu.domains.models;

import com.schedulecore.ufu.domains.models.enums.CampusEnum;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.sql.Time;

@Data
@Builder
public class NewSchedule {
    private Time horario;
    private Date data;
    private String ginasio;
    private String responsavel;
    private String curso;
    private CampusEnum campus;
    private String matriculaAluno;
    private String telefone;
    private String email;
    private Integer quantidadePessoas;
}
</file>

<file path="docker-compose.yml">
services:
  postgres:
    image: postgres:16.1-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: SCHEDULEDB
    volumes:
      - ./backup/postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - schedule-network

networks:
  schedule-network:
    driver: bridge
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/>
	</parent>
	<groupId>com.schedule-core</groupId>
	<artifactId>ufu</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ufu</name>
	<description>Schedule Core in UFU</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/inputs/CreateScheduleInput.java">
package com.schedulecore.ufu.domains.inputs;

import com.schedulecore.ufu.domains.models.NewSchedule;
import com.schedulecore.ufu.domains.models.enums.CampusEnum;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.sql.Time;

@Data
@Builder
public class CreateScheduleInput {
    private Time horario;
    private Date data;
    private String ginasio;
    private String responsavel;
    private String curso;
    private String email;
    private CampusEnum campus;
    private String matriculaAluno;
    private String telefone;
    private Integer quantidadePessoas;

    public NewSchedule toModel(){
        return NewSchedule.builder()
                .horario(horario)
                .data(data)
                .ginasio(ginasio)
                .responsavel(responsavel)
                .curso(curso)
                .email(email)
                .campus(campus)
                .matriculaAluno(matriculaAluno)
                .telefone(telefone)
                .quantidadePessoas(quantidadePessoas)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/inputs/GetSchedulesInput.java">
package com.schedulecore.ufu.domains.inputs;


import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.util.Optional;

@Data
@Builder
public class GetSchedulesInput {
    private Date data;
    private Optional<String> ginasio;
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/request/NewScheduleRequest.java">
package com.schedulecore.ufu.infrasctructure.api.request;

import com.schedulecore.ufu.domains.inputs.CreateScheduleInput;
import com.schedulecore.ufu.domains.models.enums.CampusEnum;
import jakarta.validation.constraints.NotNull;
import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.MonthDay;

@Data
@Builder
public class NewScheduleRequest {

    @NotNull
    private LocalDate data;
    @NotNull
    private Time horario;
    @NotNull
    private String ginasio;
    @NotNull
    private String responsavel;
    @NotNull
    private String curso;
    @NotNull
    private String email;
    @NotNull
    private String campus;
    @NotNull
    private String matriculaAluno;
    @NotNull
    private String telefone;
    @NotNull
    private Integer quantidadePessoas;

    public CreateScheduleInput toInput() {
        return CreateScheduleInput.builder()
                .data(Date.valueOf(data))
                .horario(horario)
                .ginasio(ginasio)
                .responsavel(responsavel)
                .curso(curso)
                .email(email)
                .campus(CampusEnum.valueOf(campus.toUpperCase()))
                .matriculaAluno(matriculaAluno)
                .telefone(telefone)
                .quantidadePessoas(quantidadePessoas)
                .build();
    }
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/v1/AdmController.java">
package com.schedulecore.ufu.infrasctructure.api.v1;

import com.schedulecore.ufu.domains.resourses.ginasio.CreateOrUpdateGinasio;
import com.schedulecore.ufu.domains.resourses.ginasio.DeleteGinasio;
import com.schedulecore.ufu.domains.resourses.restricao.CreateRestricao;
import com.schedulecore.ufu.domains.resourses.restricao.DeleteRestricao;
import com.schedulecore.ufu.infrasctructure.api.request.CreateGinasioRequest;
import com.schedulecore.ufu.infrasctructure.api.request.RestricaoRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/v1/adm")
public class AdmController {
    private final CreateOrUpdateGinasio createOrUpdateGinasio;
    private final DeleteGinasio deleteGinasio;
    private final CreateRestricao createRestricao;
    private final DeleteRestricao deleteRestricao;

    @PostMapping("/ginasio")
    public void createOrUpdateGinasio(@RequestBody CreateGinasioRequest request) {
        log.info("Received request for createOrUpdateGinasio: {}", request);
        createOrUpdateGinasio.execute(request.toInput());
    }

    @PostMapping("/ginasio/delete/{id}")
    public void deleteGinasio(@PathVariable("id") String id) {
        log.info("Received request for deleteGinasio: {}", id);
        deleteGinasio.execute(id);
    }

    @PostMapping("/restricao")
    public void createRestricao(@RequestBody RestricaoRequest request) {
        log.info("Received request for createRestricao: {}", request);
        createRestricao.execute(request.toInput());
    }
    @PostMapping("/restricao/delete")
    public void deleteRestricao(@RequestBody RestricaoRequest request) {
        log.info("Received request for deleteRestricao: {}", request);
        deleteRestricao.execute(request.toInput());
    }

}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/models/ScheduleModel.java">
package com.schedulecore.ufu.domains.models;


import lombok.Builder;
import lombok.Data;

import java.sql.Date;
import java.sql.Time;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.time.MonthDay;
import java.util.List;

@Data
@Builder
public class ScheduleModel {
    private Time horario;
    private Date data;
    private String ginasio;
    private String responsavel;
    private String curso;
    private String campus;
    private String matriculaAluno;
    private String email;
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/entitys/ReservaEntity.java">
package com.schedulecore.ufu.infrasctructure.database.entitys;

import com.schedulecore.ufu.domains.models.ScheduleModel;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.Date;
import java.sql.Time;

@Entity
@Table(name = "reservas")
@Data
@NoArgsConstructor
public class ReservaEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Time horario;
    private Date data;
    private String ginasio;
    private String responsavel;
    private String curso;
    private String campus;
    private String matriculaAluno;
    private String telefone;
    private String email;
    private Integer quantidadePessoas;

    public ReservaEntity(Time horario, Date data, String ginasio, String responsavel, String curso, String campus, String matriculaAluno, String telefone, Integer quantidadePessoas, String email) {
        this.horario = horario;
        this.data = data;
        this.ginasio = ginasio;
        this.responsavel = responsavel;
        this.curso = curso;
        this.email = email;
        this.campus = campus;
        this.matriculaAluno = matriculaAluno;
        this.telefone = telefone;
        this.quantidadePessoas = quantidadePessoas;
    }


    public ScheduleModel toModel() {
        return ScheduleModel.builder()
                .horario(horario)
                .data(data)
                .ginasio(ginasio)
                .email(email)
                .matriculaAluno(matriculaAluno)
                .responsavel(responsavel)
                .curso(curso)
                .campus(campus)
                .build();
    }


}
</file>

<file path="src/main/resources/application.yml">
spring:
    application:
        name: schedulecore
    mail:
        host: smtp.office365.com
        port: 587
        username: ${email}
        password: ${senha}
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enable: true

server:
    port: 3000
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/request/ScheduleRequest.java">
package com.schedulecore.ufu.infrasctructure.api.request;


import jakarta.validation.constraints.NotNull;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDate;

@Data
@Builder
public class ScheduleRequest {
    @NotNull
    private LocalDate data;
    private String ginasio;
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/repositorys/ReservaRepository.java">
package com.schedulecore.ufu.infrasctructure.database.repositorys;

import com.schedulecore.ufu.infrasctructure.database.entitys.ReservaEntity;
import org.springframework.data.jpa.repository.JpaRepository;

import java.sql.Date;
import java.sql.Time;
import java.util.List;

public interface ReservaRepository extends JpaRepository<ReservaEntity, Long> {
    List<ReservaEntity> findAllByGinasioAndData(String ginasio, Date data);

    List<ReservaEntity> findAllByData(Date data);

    List<ReservaEntity> findAllByMatriculaAluno(String matricula);

    ReservaEntity findByGinasioAndHorarioAndData(String ginasio, Time horario, Date data);

    void deleteByHorarioAndGinasioAndDataAndMatriculaAluno(Time horario, String ginasio, Date data, String matriculaAluno);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/domains/ports/DatabasePort.java">
package com.schedulecore.ufu.domains.ports;

import com.schedulecore.ufu.domains.models.*;

import java.sql.Date;
import java.sql.Time;
import java.util.List;
import java.util.Optional;

public interface DatabasePort {
    List<ScheduleModel> findSchedulesByGinasioAndMonthAndDay(Date data, String campus);
    List<ScheduleModel> findSchedulesByMonthAndDay(Date data);
    void saveSchedule(NewSchedule model);
    void saveGinasio(GinasioModel model);
    void updateSchedule(NewSchedule model);
    void updateGinasio(GinasioModel model);
    void deleteSchedule(Time horario, Date data, String ginasio, String matriculaAluno);
    Optional<GinasioModel> findGinasioById(String id);
    Optional<ScheduleModel> findScheduleByHorarioAndMounthDayAndGinasio(Time horario, Date monthDay, String ginasio);
    void deleteGinasio(String ginasio);
    Optional<UserModel> findUserByMatricula(String matricula);
    Optional<RestricaoModel> findRestricaoByGinasioAndData(String ginasio, Date data);
    void saveRestricao(RestricaoModel model);
    void deleteRestricao(RestricaoModel model);
}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/api/v1/ScheduleController.java">
package com.schedulecore.ufu.infrasctructure.api.v1;

import com.schedulecore.ufu.domains.inputs.GetSchedulesInput;
import com.schedulecore.ufu.domains.models.ScheduleModel;
import com.schedulecore.ufu.domains.resourses.schedule.CreateSchedule;
import com.schedulecore.ufu.domains.resourses.schedule.DeleteSchedule;
import com.schedulecore.ufu.domains.resourses.schedule.GetSchedules;
import com.schedulecore.ufu.infrasctructure.api.request.DeleteScheduleRequest;
import com.schedulecore.ufu.infrasctructure.api.request.NewScheduleRequest;
import com.schedulecore.ufu.infrasctructure.api.request.ScheduleRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;
import java.util.List;
import java.util.Optional;

@RestController
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/v1")
public class ScheduleController {
    private final GetSchedules getSchedules;
    private final CreateSchedule createSchedule;
    private final DeleteSchedule deleteSchedule;

    @GetMapping("/teste")
    public String teste() {
        log.info("Received request for teste endpoint");
        return "Schedule UFU Core is running";
    }

    @GetMapping("/schedule")
    public List<ScheduleModel> getSchedule(@RequestBody ScheduleRequest request) {
        log.info("Received request for getSchedule: {}", request);
        return getSchedules.get(GetSchedulesInput.builder()
                .data(Date.valueOf(request.getData()))
                .ginasio(Optional.ofNullable(request.getGinasio()))
                .build());
    }

    @PostMapping("/schedule")
    public void createShedule(@RequestBody NewScheduleRequest request) {
        log.info("Received request for createShedule: {}", request);
        createSchedule.execute(request.toInput());
    }

    @PostMapping("/schedule/delete")
    public void deleteSchedule(@RequestBody DeleteScheduleRequest request) {
        log.info("Received request for deleteSchedule: {}", request);
        deleteSchedule.execute(request.toInput());
    }

}
</file>

<file path="src/main/java/com/schedulecore/ufu/infrasctructure/database/DatabaseAdapter.java">
package com.schedulecore.ufu.infrasctructure.database;

import com.schedulecore.ufu.domains.models.*;
import com.schedulecore.ufu.domains.ports.DatabasePort;
import com.schedulecore.ufu.infrasctructure.database.entitys.GinasioEntity;
import com.schedulecore.ufu.infrasctructure.database.entitys.ReservaEntity;
import com.schedulecore.ufu.infrasctructure.database.entitys.RestricaoEntity;
import com.schedulecore.ufu.infrasctructure.database.entitys.UserEntity;
import com.schedulecore.ufu.infrasctructure.database.repositorys.GinasioRepository;
import com.schedulecore.ufu.infrasctructure.database.repositorys.ReservaRepository;
import com.schedulecore.ufu.infrasctructure.database.repositorys.RestricaoRepository;
import com.schedulecore.ufu.infrasctructure.database.repositorys.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Date;
import java.sql.Time;
import java.util.List;
import java.util.Optional;

@Component
@RequiredArgsConstructor
@Slf4j
public class DatabaseAdapter implements DatabasePort {
    private final ReservaRepository reservaRepository;
    private final GinasioRepository ginasioRepository;
    private final UserRepository userRepository;
    private final RestricaoRepository restricaoRepository;

    @Override
    public List<ScheduleModel> findSchedulesByGinasioAndMonthAndDay(Date data, String ginasio) {
        log.info("getSchedulesByCampusAndMonthAndDay schedules for ginasio: {}, data: {}", ginasio, data);
        return reservaRepository.findAllByGinasioAndData(ginasio, data)
                .stream()
                .map(ReservaEntity::toModel)
                .toList();
    }

    @Override
    public List<ScheduleModel> findSchedulesByMonthAndDay(Date data) {
        log.info("findSchedulesByMonthAndDay schedules for data: {}", data);
        return reservaRepository.findAllByData(data)
                .stream()
                .map(ReservaEntity::toModel)
                .toList();
    }

    @Override
    public void saveSchedule(NewSchedule model) {
        log.info("Saving new schedule: {}", model);
        reservaRepository.save(new ReservaEntity(
                model.getHorario(),
                model.getData(),
                model.getGinasio(),
                model.getResponsavel(),
                model.getCurso(),
                model.getCampus().name(),
                model.getMatriculaAluno(),
                model.getTelefone(),
                model.getQuantidadePessoas(),
                model.getEmail()
        ));
    }

    @Override
    public void saveGinasio(GinasioModel model) {
        log.info("Saving new ginasio: {}", model);
        GinasioEntity ginasioEntity = new GinasioEntity();
        ginasioEntity.setNome(model.getNome());
        ginasioEntity.setStartTime(model.getStartTime());
        ginasioEntity.setEndTime(model.getEndTime());
        ginasioEntity.setCampus(model.getCampus());
        ginasioRepository.save(ginasioEntity);

    }

    @Override
    @Transactional
    public void updateSchedule(NewSchedule model) {
        log.info("Updating schedule: {}", model);
        Optional.ofNullable(
                reservaRepository.findByGinasioAndHorarioAndData(model.getGinasio(), model.getHorario(), model.getData())
        ).ifPresent(reserva -> {
            reserva.setResponsavel(model.getResponsavel());
            reserva.setCurso(model.getCurso());
            reserva.setMatriculaAluno(model.getMatriculaAluno());
            reserva.setTelefone(model.getTelefone());
            reserva.setQuantidadePessoas(model.getQuantidadePessoas());
            reservaRepository.save(reserva);
        });
    }

    @Override
    @Transactional
    public void updateGinasio(GinasioModel model) {
        log.info("Updating ginasio: {}", model);
        ginasioRepository.findById(model.getNome())
                .ifPresent(ginasioEntity -> {
                            ginasioEntity.setStartTime(model.getStartTime());
                            ginasioEntity.setEndTime(model.getEndTime());
                            ginasioEntity.setNome(model.getNome());
                            ginasioEntity.setCampus(model.getCampus());
                            ginasioRepository.save(ginasioEntity);
                        }
                );

    }

    @Override
    @Transactional
    public void deleteSchedule(Time horario, Date data, String ginasio, String matricula) {
        log.info("Deleting schedule for horario: {}, data: {}, ginasio: {}, matricula: {}", horario, data, ginasio, matricula);
        reservaRepository.deleteByHorarioAndGinasioAndDataAndMatriculaAluno(horario, ginasio, data, matricula);
    }

    @Override
    public Optional<GinasioModel> findGinasioById(String id) {
        log.info("getGinasioById - ginasio by id: {}", id);
        return ginasioRepository.findById(id).flatMap(GinasioEntity::toModel);
    }

    @Override
    public Optional<ScheduleModel> findScheduleByHorarioAndMounthDayAndGinasio(Time horario, Date data, String ginasio) {
        log.info("findScheduleByHorarioAndMounthDayAndGinasio - searching schedule for ginasio: {}, horario: {}, data: {}", ginasio, horario, data);
        return Optional.ofNullable(reservaRepository.findByGinasioAndHorarioAndData(ginasio, horario, data))
                .map(ReservaEntity::toModel);
    }

    @Override
    @Transactional
    public void deleteGinasio(String ginasio) {
        log.info("Deleting ginasio: {}" , ginasio);
       ginasioRepository.deleteById(ginasio);
    }

    @Override
    public Optional<UserModel> findUserByMatricula(String matricula) {
        log.info("findByMatricula - searching user by matricula: {}", matricula);
        return userRepository.findById(matricula)
                .map(UserEntity::toModel);
    }

    @Override
    public Optional<RestricaoModel> findRestricaoByGinasioAndData(String ginasio, Date data) {
        log.info("findRestricaoByGinasioAndData - searching restriction for ginasio: {}, data: {}", ginasio, data);
        return Optional.ofNullable(restricaoRepository.findByGinasioAndData(ginasio, data))
                .map(RestricaoEntity::toModel);
    }

    @Override
    public void saveRestricao(RestricaoModel model) {
        log.info("Saving new restriction: {}", model);
         Optional.ofNullable(restricaoRepository.findByGinasioAndData(
                         model.getGinasio(),
                         model.getData()
                 )).ifPresentOrElse(
                    existingRestricao -> {
                        throw new IllegalArgumentException("Restriction already exists for ginasio: " + existingRestricao.getGinasio() + " and data: " + existingRestricao.getData());
                    },
                    () -> restricaoRepository.save(new RestricaoEntity(
                            model.getGinasio(),
                            model.getData(),
                            model.getDescricao()
                    ))
                );
    }

    @Override
    public void deleteRestricao(RestricaoModel model) {
        Optional.ofNullable(restricaoRepository.findByGinasioAndData(model.getGinasio()
                , model.getData())).map(
                restricaoEntity -> {
                    log.info("Delete restriction: {}", model);
                    restricaoRepository.delete(restricaoEntity);
                    return restricaoEntity;
                }
        ).orElseThrow(() -> new IllegalArgumentException("Restriction not found for ginasio: " + model.getGinasio() + " and data: " + model.getData()));
    }
}
</file>

</files>
